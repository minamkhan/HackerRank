import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.stream.IntStream;

public class Solution {
    
 
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for (int a0 = 0; a0 < t; a0++) {
            String expression = in.next();
            System.out.println( (isBalanced(expression)) ? "YES" : "NO" );
        }
    }
 	
    private static boolean isBalanced(String expression) {
    	
    	HashMap<Character, Character> map = new HashMap<>();
        map.put(')','(');
        map.put(']','[');
        map.put('}','{');
 
        if ((expression.length() % 2) != 0) {
            return false; // No need to check odd length Strings 
        }
        
        int size = expression.length();
        ArrayDeque<Character> deque = new ArrayDeque<>();
        AtomicBoolean isBalanced = new AtomicBoolean(true);
        IntStream.range(0, size)
							.anyMatch(i->{
								 				ArrayDeque<Character> deque1 = deque;
								        		Character ch = expression.charAt(i);
								        		Character matchCh = map.get(expression.charAt(i));
								        		if(matchCh==null){
                                            //If not matching bracket found than push the character to top of the array
								        			deque.push(ch); 
								        		}else{
                                                    //Get character from stack
								        			Character stackCh = deque.isEmpty()?null:deque.pop(); 
                                                    
								        			if(stackCh==null || !matchCh.equals(stackCh) ){
								        				isBalanced.set(false);								        				
								        			}
								        		}
								        	if(!isBalanced.get())return true;
								        	else return false;
								        		        
								        });
        if(isBalanced.get() && deque.size()==0){
        	return true;
        }else{
        	return false;
        }

    }
    
}

