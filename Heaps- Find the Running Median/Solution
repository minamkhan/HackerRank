import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
import java.util.Collections;
import java.util.PriorityQueue;
import java.util.Scanner;

public class Solution {
    // keeps track of the SMALL numbers, Biggest number will be on top
    private static PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder()); 
    
    // keeps track of the LARGE numbers, Smallest number will always be on top
    private static PriorityQueue<Integer> minHeap = new PriorityQueue<>();                       
    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] a = new int[n];
        for(int a_i=0; a_i < n; a_i++){
           // a[a_i] = in.nextInt();
            manageHeaps(in.nextInt());
            System.out.println(calculateMedian());
        }
        in.close();
        
    }
    
     private static void manageHeaps(int n){
         if(maxHeap.isEmpty()){
             maxHeap.add(n);
         }else if(maxHeap.size()>minHeap.size()){
             if(n>maxHeap.peek()){
                 minHeap.add(n);
             }else{
                 maxHeap.add(n);
                 minHeap.add(maxHeap.remove());
             }
         }else if(maxHeap.size()==minHeap.size()){
             if(n<minHeap.peek()){
                 maxHeap.add(n);
             }else{
                 minHeap.add(n);
                 maxHeap.add(minHeap.remove());
             }
         }
         //No need to add maxHeap.size < minHeap.size as this will never happen    
     }
 
          
    private static double calculateMedian() {
        if (maxHeap.isEmpty()) {
            return 0;
        } else if (maxHeap.size() == minHeap.size()) {
            return (maxHeap.peek() + minHeap.peek()) / 2.0;
        } else {
            return maxHeap.peek();
        }
    }
 
}

